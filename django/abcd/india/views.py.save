from coronadisplay import chart, summarydata, sqldataformating, makebarchart,getplace,getdailydifference,getfactsdata
from django.shortcuts import render
import numpy as np
import mysql.connector as m


def indiadashboard(request):
    


    commandlist=[{"command":"select loc,totalConfirmed from coronastatedaily where date=(select max(date) from coronastatedaily) order by totalConfirmed desc limit 20;","xlable":"Total Confirmed Cases","ylable":"States","title":"TOP 20 STATES WITH MAX CONFIRMED CASES","chart_type":"barh"},
             {"command":"select loc,deaths from coronastatedaily where date=(select max(date) from coronastatedaily) order by deaths desc limit 20","xlable":"Total Deaths","ylable":"States","title":"TOP 20 STATES WITH MAX DEATHS","chart_type":"barh"},
             {"command":"select loc,discharged from coronastatedaily where date=(select max(date) from coronastatedaily) order by discharged desc limit 20","xlable":"Total Recovered","ylable":"States","title":"TOP 20 STATES WITH MAX RECOVERED","chart_type":"barh"}
                 ]

    paths = []
    for i in range(len(commandlist)):
        try:
            paths.append(
            makebarchart(commandlist[i]["command"], title=commandlist[i]["title"], xlable=commandlist[i]["xlable"],
                         ylable=commandlist[i]["ylable"], filename="state" + str(i + 1),chart_type=commandlist[i]["chart_type"]))
        except:
            pass
    con = m.connect(host="localhost", user="username", passwd='svasnnmsjdcfjdDFGH!5548)', database="vikas")
    cur = con.cursor()
    cur.execute("desc coronastatedaily;")
    headeralldata = cur.fetchall()
    headerdata = np.array(headeralldata)
    header = headerdata[0:len(headerdata), 0]

    command2 = '''select * from coronastatedaily where date =(select max(date) from coronastatedaily);'''

    cur = con.cursor()
    cur.execute(command2)
    alldata = cur.fetchall()

    cur.close()
    con.close()
    completedatatorender = sqldataformating(alldata, header)

    p = summarydata()
    facts = getfactsdata("Coronaworld1", "India")
    
    
    
    differencedata = getdailydifference('Coronaworld1', 'cases', 'date', fc1="country_name", pk1="India", orderby='-date', limit=30)
    paths.append(
        chart(differencedata[1], axis2=differencedata[0], filename="statedetail" + str(i + 2), chart_type="plot",
              title=f"India: Daily New Cases", xlable="Dates", ylable="New Cases"))


    return render(request, 'india.html',
                  {'user_images': paths, 'data1': completedatatorender[0], 'header1': completedatatorender[1][0],
                   'wt': p[0], 'wd': p[1], 'it': p[2], 'id': p[3], 'd': p[4],'facts':facts})


def indiastatedashboard(request):


    state1 = request.GET['name'].split(" ")
    state=getplace(state1)


    commandlist=[{"command":f"select date,totalConfirmed from coronastatedaily where loc like '%{state}%' order by date desc limit 20;","xlable":"Date","ylable":"Total Confirmed Cases","title":f"{str(state).upper()}-- TOTAL CONFIRMED CASES","chart_type":"bar"}]
    paths = []
    for i in range(len(commandlist)):
        paths.append(
            makebarchart(commandlist[i]["command"], title=commandlist[i]["title"], xlable=commandlist[i]["xlable"],
                         ylable=commandlist[i]["ylable"], filename="state" + str(i + 1),chart_type=commandlist[i]["chart_type"]))

    con = m.connect(host="localhost", user="root", passwd="", database="vikas")
    cur = con.cursor()
    cur.execute("desc coronastatedaily;")
    headeralldata = cur.fetchall()
    headerdata = np.array(headeralldata)
    header = headerdata[0:len(headerdata), 0]
    command2 = '''select * from coronastatedaily where loc like "%{}%";'''.format(state)

    cur = con.cursor()
    cur.execute(command2)
    alldata = cur.fetchall()

    cur.close()
    con.close()
    completedatatorender = sqldataformating(alldata, header)
    p = summarydata()

    facts = getfactsdata("Coronastatedaily", state)

    differencedata = getdailydifference('Coronastatedaily', 'totalconfirmed', 'date', fc1="loc", pk1=state, orderby='-date', limit=20)
    paths.append(
        chart(differencedata[1], axis2=differencedata[0], filename="statedetail" + str(i + 1), chart_type="plot",
              title=f"{state}: Daily New Cases", xlable="Dates", ylable="New Cases"))
    
    differencedata = getdailydifference('Coronaworld1', 'cases', 'date', fc1="country_name", pk1="India", orderby='-date', limit=30)
    paths.append(
        chart(differencedata[1], axis2=differencedata[0], filename="indiadetail" + str(i + 2), chart_type="plot",
              title=f"India: Daily New Cases", xlable="Dates", ylable="New Cases"))

    return render(request, 'state.html',
                  {'user_images': paths, 'data1': completedatatorender[0], 'header1': completedatatorender[1][0],
                   'wt': p[0], 'wd': p[1], 'it': p[2], 'id': p[3], 'd': p[4],'facts':facts})


def indiadistrictdashboard(request):


    state1 = request.GET['name'].split(" ")
    state=getplace(state1)

    commandlist=[{"command":f"select district,confirmed from districtdaily where state like '%{state}%' and date =(select max(date) from districtdaily ) order by confirmed desc limit 15;","xlable":"states","ylable":"Total Confirmed Cases","title":f"{str(state).upper()}-- TOTAL CONFIRMED CASES","chart_type":"bar"},
                 {"command":f"select district,active from districtdaily where state like '%{state}%' and date =(select max(date) from districtdaily ) order by active desc limit 15;","xlable":"Daily active Cases","ylable":"District","title":"TOP 15 Districts :Active Cases ","chart_type":"barh"}]
    paths = []
    for i in range(len(commandlist)):
        paths.append(
            makebarchart(commandlist[i]["command"], title=commandlist[i]["title"], xlable=commandlist[i]["xlable"],
                         ylable=commandlist[i]["ylable"], filename="district" + str(i + 1),chart_type=commandlist[i]["chart_type"]))

    con = m.connect(host="localhost", user="root", passwd="1@Million", database="vikas")
    cur = con.cursor()
    cur.execute("desc districtdaily;")
    headeralldata = cur.fetchall()
    headerdata = np.array(headeralldata)
    header = headerdata[0:len(headerdata), 0]

    command2 = '''select * from districtdaily where state like "%{}%" and date =(select max(date) from districtdaily);'''.format(state)

    cur = con.cursor()
    cur.execute(command2)
    alldata = cur.fetchall()

    cur.close()
    con.close()
    completedatatorender = sqldataformating(alldata, header)
    p = summarydata()

    return render(request, 'district.html',
                  {'user_images': paths, 'data1': completedatatorender[0], 'header1': completedatatorender[1][0],
                   'wt': p[0], 'wd': p[1], 'it': p[2], 'id': p[3], 'd': p[4]})


def indiadistrictdetaildashboard(request):
    district1 = request.GET['name'].split(" ")
    statedistrict=getplace(district1).split(" ")
    con = m.connect(host="localhost", user="root", passwd="1@Million", database="vikas")
    cur = con.cursor()
    partition_index=0
    leng=0
    for i in range(1,5):
        state=" ".join(statedistrict[:i])
        district=" ".join(statedistrict[i:])

        command2 = '''select * from districtdaily where state = "{}" and district ="{}" ;'''.format(state,district)

        cur = con.cursor()
        cur.execute(command2)
        alldata = cur.fetchall()
        if len(alldata)>leng:
            leng = len(alldata)
            partition_index=i
    state = " ".join(statedistrict[:partition_index])
    district = " ".join(statedistrict[partition_index:])



    commandlist = [{
                       "command": f"select date,confirmed from districtdaily where state ='{state}' and district = '{district}' order by date desc limit 15;",
                       "xlable": "date", "ylable": "Total Confirmed Cases",
                       "title": f"{str(district).upper()}-- TOTAL CONFIRMED CASES", "chart_type": "bar"},
                   {
                       "command": f"select date,active from districtdaily where state ='{state}' and district = '{district}' order by date desc limit 15;",
                       "xlable": "Daily active Cases", "ylable": "date", "title": f"{str(district).upper()}-- TOTAL ACTIVE CASES", "chart_type": "barh"}]
    paths = []
    for i in range(len(commandlist)):

        paths.append(
            makebarchart(commandlist[i]["command"], title=commandlist[i]["title"], xlable=commandlist[i]["xlable"],
                         ylable=commandlist[i]["ylable"], filename="districtdetail" + str(i + 1),
                         chart_type=commandlist[i]["chart_type"]))


    cur.execute("desc districtdaily;")
    headeralldata = cur.fetchall()
    headerdata = np.array(headeralldata)
    header = headerdata[0:len(headerdata), 0]

    command2 = '''select * from districtdaily where state ="{}"  and district ="{}" order by date desc;'''.format(state,district)

    cur = con.cursor()
    cur.execute(command2)
    alldata = cur.fetchall()

    cur.close()
    con.close()
    completedatatorender = sqldataformating(alldata, header)

    p = summarydata()

    facts=getfactsdata("Districtdaily",state,district)
    differencedata=getdailydifference('Districtdaily', 'confirmed', 'date',fc1="state", pk1=state,fc2="district", pk2=district, orderby='-date', limit=20)
    if(len(differencedata[0])==0):
        pass
    else:
        paths.append(chart(differencedata[1], axis2=differencedata[0], filename="statedetail" + str(i + 2), chart_type="plot", title=f"{state.upper()}: {district.upper()}:- Daily Confirmed Cases", xlable="Date", ylable="Confirmed Cases"))
    return render(request, 'districtdata.html',
                  {'user_images': paths, 'data1': completedatatorender[0], 'header1': completedatatorender[1][0],
                   'wt': p[0], 'wd': p[1], 'it': p[2], 'id': p[3], 'd': p[4],'facts':facts})
